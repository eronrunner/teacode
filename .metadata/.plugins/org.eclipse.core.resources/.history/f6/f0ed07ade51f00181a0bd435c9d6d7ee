package com.runner.teacode.config;

import java.io.IOException;
import java.util.Properties;

import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;

//@EnableAutoConfiguration(exclude=HibernateJpaAutoConfiguration.class)
@Configuration
@EnableTransactionManagement
@PropertySource("classpath:hibernate.properties")
public class HibernateConfiguration {
	@Autowired
	private Environment env;
//	final public static String HIBERNATE_CONNECTION_DRIVER_CLASS = env.getProperty("hibernate.connection.driver_class");
//	final public static String HIBERNATE_CONNECTION_URL = env.getProperty("hibernate.connection.url");
//	final public static String HIBERNATE_CONNECTION_USERNAME = env.getProperty("hibernate.connection.username");
//	final public static String HIBERNATE_CONNECTION_PASSWORD = env.getProperty("hibernate.connection.password");
//	final public static String HIBERNATE_PROPERTY_CONNECTION_AUTOCOMMIT = env.getProperty("hibernate.property.autocommit");
//	final public static String HIBERNATE_PROPERTY_SHOW_SQL = env.getProperty("hibernate.property.show_sql");
//	final public static String HIBERNATE_PROPERTY_FORMAT_SQL = env.getProperty("hibbernate.property.format_sql");
//	final public static String HIBERNATE_PROPERTY_DIALECT = env.getProperty("hibernate.properties.dialect");
//	final public static String HIBERNATE_PROPERTY_DEFAULT_SCHEMA = env.getProperty("hibernate.property.default_schema");
//	final public static String HIBERNATE_PROPERTY_HBM2DDL_AUTO = env.getProperty("hibernate.property.hbm2ddl.auto");
//	final public static String HIBERNATE_PROPERTY_CACHE_USE_SECOND_LEVEL_CACHE = env.getProperty("hibernate.property.cache.use_second_level_cache");
//	final public static String HIBERNATE_PROPERTY_CACHE_REGION_FACTORY_CLASS = env.getProperty("hibernate.property.cache.region.factory_class");
	final public static String DATA_MODEL_PACKAGE = "com.runner.teacode.data.model";
	
	@Bean
	public DataSource dataSource() {
		DriverManagerDataSource dataSource = new DriverManagerDataSource();
		dataSource.setDriverClassName(env.getProperty("hibernate.connection.driver_class"));
		dataSource.setUrl(env.getProperty("hibernate.connection.url"));
		dataSource.setUsername(env.getProperty("hibernate.connection.username"));
		dataSource.setPassword(env.getProperty("hibernate.connection.password"));
		return dataSource;
	}
	
	public Properties properties(){
		Properties  properties = new Properties();
		properties.put("hibernate.dialect", "org.hibernate.dialect.Dialect");
		properties.put("hibernate.show_sql", env.getProperty("hibernate.property.show_sql"));
        properties.put("hibernate.format_sql", env.getProperty("hibernate.property.format_sql"));
        properties.put("hibernate.connection.autocommit", env.getProperty("hibernate.property.connection.autocommit"));
		properties.put("hibernate.default_schema", env.getProperty("hibernate.property.default_schema"));
		properties.put("hibernate.hbm2ddl.auto", env.getProperty("hibernate.property.hbm2ddl.auto"));
//		properties.put("hibernate.cache.use_second_level_cache", env.getProperty("hibernate.property.cache.use_second_level_cache"));
//		properties.put("hibernate.cache.region.factory_class", env.getProperty("hibernate.property.cache.region.factory_class"));
		return properties;
	}
	
	@Bean
	public SessionFactory sessionFactory() {
		LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
		sessionFactory.setDataSource(dataSource());
		sessionFactory.setPackagesToScan(DATA_MODEL_PACKAGE);
		sessionFactory.setHibernateProperties(properties());
		try {
			sessionFactory.afterPropertiesSet();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sessionFactory.getObject();
	}
	
	@Bean
	public HibernateTransactionManager hibernateTransactionManager() {
		return new HibernateTransactionManager(sessionFactory());
	}
	
	@Bean
	public HibernateTemplate hibernateTemplate() {
		return new HibernateTemplate(sessionFactory());
	}
}
